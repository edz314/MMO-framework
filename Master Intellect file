-- Define the 8 Mind States
mind_states = {
    "Aggressive",   -- State when the NPC is actively seeking to engage in combat
    "Defensive",    -- State when the NPC is focused on defense or fortification
    "Exploratory",  -- State when the NPC is exploring or searching the environment
    "Cautious",     -- State when the NPC is wary and moves carefully
    "Neutral",      -- State when the NPC is not committed to any specific action
    "Alert",        -- State when the NPC is aware of potential danger and is on guard
    "Fearful",      -- State when the NPC is afraid and may be retreating or hiding
    "Strategic"     -- State when the NPC is planning or coordinating complex actions
}

-- Define transitions between states based on conditions
state_transitions = {
    Aggressive = function(npc)
        if npc.is_targeted then
            return "Aggressive"
        elseif npc.task == "Engage in combat" then
            return "Aggressive"
        else
            return "Neutral"
        end
    end,

    Defensive = function(npc)
        if npc.current_mind_type == "Engineer" and npc.task == "Set up defenses" then
            return "Defensive"
        elseif npc.current_mind_type == "Guard" and npc.task == "Hold Position" then
            return "Defensive"
        elseif npc.is_targeted then
            return "Alert"
        else
            return "Neutral"
        end
    end,

    Exploratory = function(npc)
        if npc.current_mind_type == "Scout" or npc.task == "Investigate" then
            return "Exploratory"
        elseif npc.task == "Patrol" then
            return "Exploratory"
        else
            return "Neutral"
        end
    end,

    Cautious = function(npc)
        if npc.is_targeted then
            return "Cautious"
        elseif npc.task == "Move slowly" or npc.current_mind_type == "Thief" then
            return "Cautious"
        else
            return "Neutral"
        end
    end,

    Neutral = function(npc)
        if npc.is_targeted then
            return "Alert"
        elseif npc.task == "Idle" then
            return "Neutral"
        else
            return "Neutral"
        end
    end,

    Alert = function(npc)
        if npc.is_targeted then
            if npc.inventory["weapon"] then
                return "Aggressive"
            else
                return "Fearful"
            end
        elseif npc.task == "Watch" or npc.current_mind_type == "Guard" then
            return "Alert"
        else
            return "Neutral"
        end
    end,

    Fearful = function(npc)
        if npc.health <= 20 or npc.is_outnumbered then
            return "Fearful"
        elseif not npc.is_targeted then
            return "Cautious"
        else
            return "Fearful"
        end
    end,

    Strategic = function(npc)
        if npc.current_mind_type == "Commander" or npc.current_mind_type == "Tactician" then
            return "Strategic"
        elseif npc.subordinates then
            return "Strategic"
        else
            return "Neutral"
        end
    end,
}

-- Function to determine the next mind state for an NPC
function determine_next_state(npc)
    local current_state = npc.current_state
    if state_transitions[current_state] then
        return state_transitions[current_state](npc)
    else
        return "Neutral"
    end
end

-- Example NPC setup
npc1 = {
    name = "Archer 1",
    position = {x = 5, y = 5},
    current_mind_type = "Archer",
    inventory = {bow = true, arrows = true, weapon = true},  -- NPC has a bow, arrows, and a weapon
    is_targeted = true,  -- NPC is being targeted by an enemy
    task = "Defend",  -- Current task assigned to the NPC
    current_state = "Alert",  -- Initial state
    mind_types = mind_types,
}

-- Example of applying the master intellect to determine the next state
function apply_master_intellect(npc)
    local next_state = determine_next_state(npc)
    npc.current_state = next_state
    print(npc.name .. " transitions to " .. npc.current_state .. " state.")
end

-- Example usage
apply_master_intellect(npc1)
