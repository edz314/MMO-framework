import random

class NPC:
    def __init__(self, name, health, state):
        self.name = name
        self.health = health
        self.state = state  # Current state of the NPC (e.g., 'Aggressive')
        self.attack_power = 10  # Example attack power, could be more complex

    def attack(self, target):
        # Check if the NPC is in an Aggressive state
        if self.state == 'Aggressive':
            # Simple attack action - reduce target's health
            damage = self.attack_power
            target.health -= damage
            print(f"{self.name} attacks {target.name} for {damage} damage!")

            # After attacking, there's a chance to change state
            self.state_transition()

    def state_transition(self):
        # Example state transition logic based on probabilities
        transitions = {
            'Aggressive': [('Defensive', 0.2), ('Neutral', 0.5), ('Strategic', 0.3)],
            # Add transitions for other states as needed
        }

        if self.state in transitions:
            transition_options = transitions[self.state]
            new_state = self.probabilistic_choice(transition_options)
            print(f"{self.name} transitions from {self.state} to {new_state}.")
            self.state = new_state

    def probabilistic_choice(self, choices):
        # Function to choose a new state based on probabilities
        states, probabilities = zip(*choices)
        return random.choices(states, probabilities)[0]

class Player:
    def __init__(self, name, health):
        self.name = name
        self.health = health

# Example usage
npc = NPC(name="Goblin", health=30, state="Aggressive")
player = Player(name="Hero", health=100)

# NPC attacks the player
npc.attack(player)
print(f"{player.name}'s health: {player.health}")

# This would print something like:
# Goblin attacks Hero for 10 damage!
# Goblin transitions from Aggressive to Neutral.
# Hero's health: 90
