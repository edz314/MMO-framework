-- Define the NPC object
NPC = {
    name = "Soldier",  -- NPC's name
    position = {x = 5, y = 5},  -- Current position
    alert_range = 10,  -- Range within which the NPC can alert allies
}

-- Define potential allies in the environment
allies_in_area = {
    {name = "Guard 1", position = {x = 6, y = 7}, is_alerted = false},
    {name = "Guard 2", position = {x = 12, y = 5}, is_alerted = false},
    {name = "Guard 3", position = {x = 4, y = 10}, is_alerted = false},
}

-- Define potential enemies in the environment
enemies_in_area = {
    {name = "Enemy Scout", position = {x = 7, y = 6}},
}

-- Function to calculate the distance between two points
function calculate_distance(point1, point2)
    local dx = point2.x - point1.x
    local dy = point2.y - point1.y
    return math.sqrt(dx * dx + dy * dy)
end

-- Alert Allies action function
function alert_allies_action()
    print(NPC.name .. " is alerting nearby allies of a potential threat.")

    -- Loop through each ally to see if they are within the alert range
    for _, ally in ipairs(allies_in_area) do
        local distance_to_ally = calculate_distance(NPC.position, ally.position)

        if distance_to_ally <= NPC.alert_range then
            -- Alert the ally
            ally.is_alerted = true
            print(NPC.name .. " has alerted " .. ally.name .. " at position (" .. ally.position.x .. ", " .. ally.position.y .. ").")

            -- Optionally, you can trigger additional behavior for the alerted ally
            -- For example, the ally could move towards the NPC, prepare for combat, or scan for enemies
            if #enemies_in_area > 0 then
                print(ally.name .. " is now preparing for combat!")
            else
                print(ally.name .. " is on high alert but sees no immediate threats.")
            end
        else
            print(ally.name .. " is too far away to be alerted.")
        end
    end
end

-- Example usage:
-- Execute the alert allies action
alert_allies_action()
