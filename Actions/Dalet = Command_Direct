-- Define the NPC object (Commander)
NPC = {
    name = "Commander",  -- NPC's name
    position = {x = 5, y = 5},  -- Current position
    command_range = 20,  -- Range within which the NPC can issue commands
    subordinates = {},  -- List of subordinates that the NPC can command
}

-- Define potential commands
commands = {
    "Attack",  -- Command to attack a target
    "Defend",  -- Command to hold a position
    "Move",  -- Command to move to a specific location
    "Retreat",  -- Command to fall back to a safe position
}

-- Define potential enemies or points of interest in the environment
targets_in_area = {
    {name = "Enemy Soldier", position = {x = 15, y = 5}},
    {name = "Resource Point", position = {x = 12, y = 8}},
}

-- Function to calculate the distance between two points
function calculate_distance(point1, point2)
    local dx = point2.x - point1.x
    local dy = point2.y - point1.y
    return math.sqrt(dx * dx + dy * dy)
end

-- Function to issue a command to a subordinate
function issue_command(subordinate, command, target_position)
    if command == "Attack" then
        print(NPC.name .. " commands " .. subordinate.name .. " to attack the target at position (" .. target_position.x .. ", " .. target_position.y .. ").")
        -- Subordinate would move to the target and engage
        subordinate.position = target_position
    elseif command == "Defend" then
        print(NPC.name .. " commands " .. subordinate.name .. " to defend position (" .. target_position.x .. ", " .. target_position.y .. ").")
        -- Subordinate would move to the position and hold it
        subordinate.position = target_position
    elseif command == "Move" then
        print(NPC.name .. " commands " .. subordinate.name .. " to move to position (" .. target_position.x .. ", " .. target_position.y .. ").")
        -- Subordinate would move to the specified location
        subordinate.position = target_position
    elseif command == "Retreat" then
        print(NPC.name .. " commands " .. subordinate.name .. " to retreat to position (" .. target_position.x .. ", " .. target_position.y .. ").")
        -- Subordinate would fall back to the specified location
        subordinate.position = target_position
    else
        print("Unknown command issued.")
    end
end

-- Command/Direct action function
function command_direct_action()
    -- Select a command to issue (for demonstration, we'll select one randomly)
    local command = commands[math.random(#commands)]

    -- Select a subordinate to command (for demonstration, we'll select one randomly)
    local subordinate = NPC.subordinates[math.random(#NPC.subordinates)]

    -- Select a target or position (for demonstration, we'll use the first target in the list)
    local target_position = targets_in_area[1].position

    -- Calculate the distance to the subordinate
    local distance_to_subordinate = calculate_distance(NPC.position, subordinate.position)

    -- Check if the subordinate is within command range
    if distance_to_subordinate <= NPC.command_range then
        -- Issue the command to the selected subordinate
        issue_command(subordinate, command, target_position)
    else
        print(subordinate.name .. " is out of command range and cannot receive the command.")
    end
end

-- Example usage:
-- Define some subordinates that can receive commands
NPC.subordinates = {
    {name = "Soldier 1", position = {x = 6, y = 6}},
    {name = "Archer 1", position = {x = 8, y = 8}},
    {name = "Mage 1", position = {x = 10, y = 7}},
}

-- Execute the command/direct action
command_direct_action()

-- Output the status of subordinates after receiving commands
for _, subordinate in ipairs(NPC.subordinates) do
    print(subordinate.name .. " is now at position (" .. subordinate.position.x .. ", " .. subordinate.position.y .. ").")
end
