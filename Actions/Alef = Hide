-- Define the NPC object
NPC = {
    name = "Thief",  -- NPC's name
    position = {x = 5, y = 5},  -- Current position
    hide_range = 10,  -- Range within which the NPC searches for hiding spots
    is_hidden = false,  -- Indicates whether the NPC is currently hidden
}

-- Define potential hiding spots in the environment
hiding_spots = {
    {name = "Bushes", position = {x = 3, y = 3}},
    {name = "Cave Entrance", position = {x = 8, y = 7}},
    {name = "Behind Rock", position = {x = 10, y = 2}},
}

-- Function to calculate the distance between two points
function calculate_distance(point1, point2)
    local dx = point2.x - point1.x
    local dy = point2.y - point1.y
    return math.sqrt(dx * dx + dy * dy)
end

-- Function to find the nearest hiding spot within range
function find_nearest_hiding_spot()
    local nearest_spot = nil
    local shortest_distance = math.huge  -- Initialize with a very large number

    for _, spot in ipairs(hiding_spots) do
        local distance = calculate_distance(NPC.position, spot.position)
        if distance <= NPC.hide_range and distance < shortest_distance then
            shortest_distance = distance
            nearest_spot = spot
        end
    end

    return nearest_spot
end

-- Hide action function
function hide_action()
    -- Find the nearest hiding spot
    local hiding_spot = find_nearest_hiding_spot()

    if hiding_spot then
        -- Move the NPC to the hiding spot
        NPC.position = hiding_spot.position
        NPC.is_hidden = true
        print(NPC.name .. " is hiding at " .. hiding_spot.name .. " at position (" .. hiding_spot.position.x .. ", " .. hiding_spot.position.y .. ")")
    else
        -- If no hiding spot is found, print a message
        print("No suitable hiding spot found within range.")
    end
end

-- Example usage:
-- Execute the hide action
hide_action()

-- Output the NPC's status after hiding
if NPC.is_hidden then
    print(NPC.name .. " is successfully hidden.")
else
    print(NPC.name .. " failed to hide.")
end
