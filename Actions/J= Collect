-- Define the NPC object
NPC = {
    name = "Forager",  -- NPC's name
    position = {x = 5, y = 5},  -- Current position
    inventory = {},  -- NPC's inventory to store collected items
    collection_range = 2,  -- The range within which the NPC can collect items
}

-- Define an item to be collected
item_to_collect = {
    name = "Herb",
    position = {x = 6, y = 5},
    quantity = 5,  -- Number of items available to collect
}

-- Function to calculate the distance between the NPC and the item
function calculate_distance(point1, point2)
    local dx = point2.x - point1.x
    local dy = point2.y - point1.y
    return math.sqrt(dx * dx + dy * dy)
end

-- Function to add items to the NPC's inventory
function add_to_inventory(item_name, quantity)
    if NPC.inventory[item_name] then
        NPC.inventory[item_name] = NPC.inventory[item_name] + quantity
    else
        NPC.inventory[item_name] = quantity
    end
end

-- Collect action function
function collect_action()
    -- Calculate the distance to the item
    local distance_to_item = calculate_distance(NPC.position, item_to_collect.position)

    -- Check if the NPC is close enough to collect the item
    if distance_to_item <= NPC.collection_range then
        -- Collect the item
        add_to_inventory(item_to_collect.name, item_to_collect.quantity)
        print(NPC.name .. " collected " .. item_to_collect.quantity .. " " .. item_to_collect.name .. "(s).")

        -- Optionally, remove the item from the environment after collection
        item_to_collect.quantity = 0
    else
        -- If the NPC is too far away, print a message
        print(item_to_collect.name .. " is too far away to collect.")
    end
end

-- Example usage:
-- Execute the collect action
collect_action()

-- Output the NPC's inventory after collecting
print(NPC.name .. "'s inventory: ")
for item, quantity in pairs(NPC.inventory) do
    print(item .. ": " .. quantity)
end
